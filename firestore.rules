rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // TEST MODE: allow everything (read and write) across all collections
    match /{document=**} {
      allow read, write: if true;
    }
    // Games collection
    match /games/{gameId} {
      allow read: if true; // Anyone can read game data
      // Allow owners to update any fields
      // Additionally, allow any authenticated user to set themselves as owner
      // by updating only the ownerUid field to their own uid (no player check)
      allow update: if request.auth != null && (
        resource.data.ownerUid == request.auth.uid ||
        (
          request.resource.data.keys().hasOnly(['ownerUid']) &&
          request.resource.data.ownerUid == request.auth.uid
        )
      );
      // Allow create and delete
      allow create, delete: if request.auth != null;
      
      // Players subcollection
      match /players/{playerId} {
        allow read: if true; // Anyone can read player data
        // Users can only update their own basic info, not state/downs (handled by Functions)
        allow write: if request.auth != null && 
          (playerId == request.auth.uid || 
           get(/databases/$(database)/documents/games/$(gameId)).data.ownerUid == request.auth.uid);
      }
      
      // Locations subcollection
      match /locations/{locationId} {
        allow read: if true; // Anyone can read location data
        allow write: if request.auth != null && locationId == request.auth.uid;
      }
      
      // Captures subcollection
      match /captures/{captureId} {
        allow read: if true; // Anyone can read capture data
        allow write: if false; // Only Cloud Functions can write captures
      }

      // Alerts subcollection (NEW)
      match /alerts/{alertId} {
        // Users can only read their own alerts
        allow read: if request.auth != null && 
          resource.data.toUid == request.auth.uid;
        // Only Cloud Functions can write alerts
        allow write: if false;
      }

      // Events subcollection (NEW)
      match /events/{eventId} {
        allow read: if true; // Anyone can read events
        // Only Cloud Functions can write events
        allow write: if false;
      }

      // Capture requests subcollection (client fallback for capture)
      match /captureRequests/{requestId} {
        // Only authenticated players in the game can create a request
        allow create: if request.auth != null &&
          exists(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid)) &&
          request.resource.data.attackerUid == request.auth.uid &&
          request.resource.data.victimUid is string &&
          request.resource.data.at is timestamp;
        // No reads/updates/deletes from clients; Functions (admin) will clean up
        allow read, update, delete: if false;
      }
      
      // Chat messages subcollections (role-based)
      match /messages_oni/{messageId} {
        allow read: if request.auth != null && 
          exists(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid));
        allow create: if request.auth != null &&
          request.resource.data.uid == request.auth.uid &&
          request.resource.data.message is string &&
          request.resource.data.message.size() > 0 &&
          request.resource.data.message.size() <= 200 &&
          exists(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid)).data.role == 'oni';
        allow delete: if false;
        allow update: if false;
      }

      match /messages_runner/{messageId} {
        allow read: if request.auth != null && 
          exists(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid));
        allow create: if request.auth != null &&
          request.resource.data.uid == request.auth.uid &&
          request.resource.data.message is string &&
          request.resource.data.message.size() > 0 &&
          request.resource.data.message.size() <= 200 &&
          exists(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid)).data.role == 'runner';
        allow delete: if false;
        allow update: if false;
      }
    }
  }
}
